#version 460

struct Square{
    float x;
    float y;
    float width;
    float height;
    uint seed;
    float r;
    float g;
    float b;
};
layout(set = 0, binding = 0) buffer squareBuffer{Square squares[];};

struct PushData{
    vec3 color;
};
layout (push_constant) uniform Push{PushData push;};

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

float randomValue(inout uint state)
{
    uint result;
    state = state * 747796405 + 2891336453;
    for (int i = 0; i < 150000000; i++){
        result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737 + i;
        result = (result >> 22) ^ result;
    }
    return result / 4294967295.0;
}

void main()
{
    const uint index = gl_GlobalInvocationID.x;
    Square square = squares[index];
    square.seed += index;

    square.x += (randomValue(square.seed) - 0.5) / 5.0;
    square.y += (randomValue(square.seed) - 0.5) / 5.0;
    square.width += (randomValue(square.seed) - 0.5) / 50.0;
    square.height += (randomValue(square.seed) - 0.5) / 50.0;

    square.r = push.color.x;
    square.g = push.color.y;
    square.b = push.color.z;

    squares[index] = square;
}
