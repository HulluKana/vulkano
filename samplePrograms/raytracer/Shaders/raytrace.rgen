#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "../include/host_device.hpp"
#include "common.glsl"

layout(binding = 0, set = 0) uniform Ubo {GlobalUbo ubo;};
layout(binding = 4, set = 1) uniform accelerationStructureEXT tlas;
layout(binding = 0, set = 2, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT payload prd;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy) * 2.0 - vec2(1.0);

    const vec3 origin = ubo.cameraPosition.xyz;
    const vec4 target = ubo.inverseProjectionMatrix * vec4(uv, 1.0, 1.0);
    const vec4 dir = ubo.inverseViewMatrix * vec4(normalize(target.xyz), 0.0);

    const float minDst = 0.001;
    const float maxDst = 1000.0;

    vec3 pos = origin; 
    vec3 color = vec3(0.0);
    vec3 emission = vec3(0.0);
    float alpha = 0.0;
    while (true) {
        traceRayEXT(tlas,               // acceleration structure
                gl_RayFlagsOpaqueEXT,   // rayFlags
                0xFF,                   // cullMask
                0,                      // sbtRecordOffset
                0,                      // sbtRecordStride
                0,                      // missIndex
                pos,                    // ray origin
                minDst,                 // ray min range
                dir.xyz,                // ray direction
                maxDst,                 // ray max range
                0                       // payload (location = 0)
        );

        pos = prd.pos;

        color = alpha * color + (1.0 - alpha) * prd.hitValue.w * prd.hitValue.xyz;
        emission = emission + prd.emission * (1.0 - alpha);
        alpha = prd.hitValue.w - prd.hitValue.w * alpha + alpha;
        if (alpha >= 0.97) break;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color + emission, 1.0));
}
