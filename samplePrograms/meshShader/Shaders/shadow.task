#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_ARB_shader_draw_parameters : enable
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

layout(binding = 0, set = 0) uniform UniformBuffer {ShadowUbo ubo;};
layout(binding = 1, set = 0, scalar) readonly buffer VertexBuffer {vec3 verts[];};
layout(binding = 2, set = 0) readonly buffer MeshletVerticesBuffer {uint meshletVertices[];};
layout(binding = 3, set = 0, scalar) readonly buffer MeshletIndicesBuffer {uint8_t meshletTriangles[];};
layout(binding = 4, set = 0, scalar) readonly buffer MeshletBuffer {Meshlet meshlets[];};
layout(binding = 5, set = 0, scalar) readonly buffer MeshletBoundsBuffer {MeshletBounds meshletBounds[];};
layout(binding = 6, set = 0, scalar) readonly buffer MeshInfoBuffer {MeshInfo meshInfos[];};

layout (local_size_x = MESHLETS_PER_TASK_SHADER, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Push{ShadowPushConstant push;};

taskPayloadSharedEXT TaskPayload taskPayload;

void main()
{
    uint meshletIdx = gl_GlobalInvocationID.x;
    const MeshInfo meshInfo = meshInfos[gl_DrawIDARB];
    if (meshletIdx >= meshInfo.meshletCount) return;
    meshletIdx += meshInfo.meshletOffset;

    // Source for frustum culling: https://www.gamedevs.org/uploads/fast-extraction-viewing-frustum-planes-from-world-view-projection-matrix.pdf
    const MeshletBounds bounds = meshletBounds[meshletIdx];
    const float radius = bounds.radius * length(meshInfo.modelMatrix[0]);
    vec4 frustumPlanes[6];
    const mat4 mvpMatrix = push.projectionMatrix * ubo.viewMatrixes[push.viewMatIdx] * meshInfo.modelMatrix;
    
    for (int i = 0; i < 4; i++) frustumPlanes[0][i] = mvpMatrix[i][3] + mvpMatrix[i][0];
    for (int i = 0; i < 4; i++) frustumPlanes[1][i] = mvpMatrix[i][3] - mvpMatrix[i][0];
    for (int i = 0; i < 4; i++) frustumPlanes[2][i] = mvpMatrix[i][3] - mvpMatrix[i][1];
    for (int i = 0; i < 4; i++) frustumPlanes[3][i] = mvpMatrix[i][3] + mvpMatrix[i][1];
    for (int i = 0; i < 4; i++) frustumPlanes[4][i] = mvpMatrix[i][3] + mvpMatrix[i][2];
    for (int i = 0; i < 4; i++) frustumPlanes[5][i] = mvpMatrix[i][3] - mvpMatrix[i][2];

    bool accept = true;
    for (int i = 0; i < 6; i++) {
        frustumPlanes[i] /= length(frustumPlanes[i].xyz);
        accept = accept && dot(bounds.center, frustumPlanes[i].xyz) + frustumPlanes[i].w + radius >= 0;
    }

    const vec3 center = vec3(meshInfo.modelMatrix * vec4(bounds.center, 1.0));
    const vec3 coneAxis = mat3(meshInfo.modelMatrix) * (bounds.coneAxis / 127.0);
    const float coneCutoff = bounds.coneCutoff / 127.0;

    accept = accept && dot(center - push.cameraPosition.xyz, coneAxis) >= coneCutoff * length(center - push.cameraPosition.xyz) + radius;
    accept = true;

    const uvec4 ballot = subgroupBallot(accept);
    const uint index = subgroupBallotExclusiveBitCount(ballot);
    if (accept) taskPayload.meshletIndices[index] = meshletIdx;

    if (gl_LocalInvocationID.x == 0) {
        taskPayload.modelMatrix = meshInfo.modelMatrix;
        taskPayload.matIdx = meshInfo.matIdx;
        EmitMeshTasksEXT(subgroupBallotBitCount(ballot), 1, 1);
    }
}
