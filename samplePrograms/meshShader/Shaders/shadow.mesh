#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

layout(binding = 0, set = 0) uniform UniformBuffer {ShadowUbo ubo;};
layout(binding = 1, set = 0, scalar) readonly buffer VertexBuffer {vec3 verts[];};
layout(binding = 2, set = 0) readonly buffer MeshletVerticesBuffer {uint meshletVertices[];};
layout(binding = 3, set = 0, scalar) readonly buffer MeshletTrianglesBuffer {uint8_t meshletTriangles[];};
layout(binding = 4, set = 0, scalar) readonly buffer MeshletBuffer {Meshlet meshlets[];};

layout(local_size_x = meshShadersPerMeshlet, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MAX_MESHLET_VERTICES, max_primitives = MAX_MESHLET_TRIANGLES) out;

layout (location = 0) out vec3 fragPosWorld[];
layout (location = 1) out vec2 fragTexCoord[];
layout (location = 2) out flat uint matIdx[];

layout(push_constant) uniform Push{ShadowPushConstant push;};

taskPayloadSharedEXT TaskPayload taskPayload;

void main()
{
    const uint threadIdx = gl_LocalInvocationID.x;
    const Meshlet meshlet = meshlets[taskPayload.meshletIndices[gl_WorkGroupID.x]];
    if (threadIdx == 0) SetMeshOutputsEXT(uint(meshlet.vertexCount), uint(meshlet.triangleCount));

    const mat4 modelMat = taskPayload.modelMatrix;
    const mat4 projViewMat = push.projectionMatrix * ubo.viewMatrixes[push.layerIdx];
    const mat3 normalMat = mat3(modelMat);

    for (uint i = threadIdx; i < uint(meshlet.vertexCount); i += meshShadersPerMeshlet) {
        const uint idx = meshletVertices[meshlet.vertexOffset + i];
        fragPosWorld[i] = vec3(modelMat * vec4(verts[idx], 1.0));
        gl_MeshVerticesEXT[i].gl_Position = projViewMat * vec4(fragPosWorld[i], 1.0);
    }

    for (uint i = threadIdx; i < uint(meshlet.triangleCount); i += meshShadersPerMeshlet) {
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(meshletTriangles[meshlet.triangleOffset + i * 3],
            meshletTriangles[meshlet.triangleOffset + i * 3 + 1], meshletTriangles[meshlet.triangleOffset + i * 3 + 2]);
        gl_MeshPrimitivesEXT[i].gl_Layer = int(push.layerIdx);
    }
}
